{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\USER\\\\OneDrive\\\\Desktop\\\\FTU Coin\\\\savjeecoin-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\USER\\\\OneDrive\\\\Desktop\\\\FTU Coin\\\\savjeecoin-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { Blockchain } from 'SavjeeCoin/src/blockchain';\nimport EC from 'elliptic';\nimport * as i0 from \"@angular/core\";\nexport var BlockchainService = /*#__PURE__*/(function () {\n  var BlockchainService = /*#__PURE__*/function () {\n    function BlockchainService() {\n      _classCallCheck(this, BlockchainService);\n\n      this.blockchainInstance = new Blockchain();\n      this.walletKeys = [];\n      this.blockchainInstance.difficulty = 1;\n      this.blockchainInstance.minePendingTransactions('hi');\n      this.generateWalletKeys();\n    }\n\n    _createClass(BlockchainService, [{\n      key: \"minePendingTransactions\",\n      value: function minePendingTransactions() {\n        this.blockchainInstance.minePendingTransactions(this.walletKeys[0].publicKey);\n      }\n    }, {\n      key: \"addressIsFromCurrentUser\",\n      value: function addressIsFromCurrentUser(address) {\n        return address === this.walletKeys[0].publicKey;\n      }\n    }, {\n      key: \"generateWalletKeys\",\n      value: function generateWalletKeys() {\n        var ec = new EC.ec('secp256k1');\n        var key = ec.genKeyPair();\n        this.walletKeys.push({\n          keyObj: key,\n          publicKey: key.getPublic('hex'),\n          privateKey: key.getPrivate('hex')\n        });\n        console.log(this.walletKeys);\n      }\n    }, {\n      key: \"getPendingTransactions\",\n      value: function getPendingTransactions() {\n        return this.blockchainInstance.pendingTransactions;\n      }\n    }, {\n      key: \"addTransaction\",\n      value: function addTransaction(tx) {\n        this.blockchainInstance.addTransaction(tx);\n      }\n    }]);\n\n    return BlockchainService;\n  }();\n\n  BlockchainService.ɵfac = function BlockchainService_Factory(t) {\n    return new (t || BlockchainService)();\n  };\n\n  BlockchainService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BlockchainService,\n    factory: BlockchainService.ɵfac,\n    providedIn: 'root'\n  });\n  return BlockchainService;\n})();","map":null,"metadata":{},"sourceType":"module"}